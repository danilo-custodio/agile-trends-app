{
  "id": "case-003",
  "title": "Java Fix Crew",
  "category": "Desenvolvimento",
  "description": "Um experimento para entender como a IA pode ajudar a criar agentes para apoiar o desenvolvimento de software. O objetivo é a partir de uma erro de codigo, corrigir o erro e ensinar o desenvolvedor. ",
  "timeReduction": "90%",
  "qualityImprovement": "30%",
  "iconName": "Zap",
  "color": "bg-yellow-100",
  "author": "Danilo Custódio",
  "createdAt": "2025-01-25T11:30:00Z",
  "updatedAt": "2025-04-09T14:30:06.338Z",
  "version": 1,
  "highlights": [
    "Utilizaçao de um orquestrador de agentes - Crew AI",
    "Códigos mais estruturados gerados pelo LLM",
    "Diminuição de interferência humana no código 90% do código criado pelo LLM"
  ],
  "promptExample": "pode separar o codigo em arquivos separados aqui no prompt ao inves de uma estrutura com tudo ?",
  "result": "Como estruturar melhor a saida de código do LLM",
  "tabs": {
    "overview": {
      "description": "Um experimento para entender como a IA pode ajudar a criar agentes para apoiar o desenvolvimento de software. O objetivo é a partir de uma erro de codigo, corrigir o erro e ensinar o desenvolvedor. "
    },
    "video": {
      "url": "https://youtu.be/0LyjOKbierc",
      "thumbnail": "thumbnails/case-003-video.jpg",
      "highlights": [
        "Comparação do antes e depois da otimização",
        "Demonstração visual da melhoria de velocidade",
        "Explicação das técnicas de otimização aplicadas"
      ],
      "resources": [
        {
          "name": "Relatório completo",
          "type": "blue-tag",
          "url": "#"
        },
        {
          "name": "Ferramenta de diagnóstico",
          "type": "green-tag",
          "url": "#"
        },
        {
          "name": "Guia de otimização",
          "type": "purple-tag",
          "url": "#"
        }
      ]
    },
    "process": {
      "steps": [
        "Análise do código fonte da aplicação pelo LLM",
        "Identificação de padrões problemáticos e gargalos",
        "Implementação das otimizações sugeridas"
      ]
    },
    "results": {
      "before": [
        "Alto tempo para encontrar e corrigir erros ",
        "Dificuldade de entendimento de causas raiz",
        "Falta de testes para que os erros não se repitam"
      ],
      "after": [
        "Maior rapidez na identificação dos erros ",
        "Aprendizado baseado na análise do agente",
        "Criação de testes unitários"
      ]
    },
    "lessons": {
      "whatWorked": [
        "Análise detalhada de código específico ao invés de generalidades",
        "Foco em poucos problemas críticos de cada vez",
        "Combinação de conhecimento técnico humano com sugestões do LLM",
        "Medição constante do progresso"
      ],
      "improvementAreas": [
        "Melhor definição do contexto arquitetural completo",
        "Mais atenção às dependências e seus impactos",
        "Consideração de estratégias de caching"
      ],
      "tips": [
        "Forneça métricas específicas e objetivas ao LLM",
        "Compartilhe trechos de código problemáticos em vez de descrições",
        "Peça priorização dos problemas por impacto",
        "Solicite explicações detalhadas de cada otimização sugerida",
        "Valide as melhorias incrementalmente"
      ]
    }
  },
  "summary": "Como a IA pode ajudar a criar agentes para apoiar o desenvolvimento de software.",
  "productName": "MVP - Java Fix Crew"
}